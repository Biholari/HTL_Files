// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class ChatdbDb : DataConnection
	{
		public ChatdbDb()
		{
			InitDataContext();
		}

		public ChatdbDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public ChatdbDb(DataOptions<ChatdbDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Chat>     Chats     => this.GetTable<Chat>();
		public ITable<Room>     Rooms     => this.GetTable<Room>();
		public ITable<RoomChat> RoomChats => this.GetTable<RoomChat>();
		public ITable<RoomUser> RoomUsers => this.GetTable<RoomUser>();
		public ITable<User>     Users     => this.GetTable<User>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Chat? Find(this ITable<Chat> table, long chatId)
		{
			return table.FirstOrDefault(e => e.ChatId == chatId);
		}

		public static Task<Chat?> FindAsync(this ITable<Chat> table, long chatId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ChatId == chatId, cancellationToken);
		}

		public static Room? Find(this ITable<Room> table, long roomId)
		{
			return table.FirstOrDefault(e => e.RoomId == roomId);
		}

		public static Task<Room?> FindAsync(this ITable<Room> table, long roomId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.RoomId == roomId, cancellationToken);
		}

		public static RoomUser? Find(this ITable<RoomUser> table, long userId, long roomId)
		{
			return table.FirstOrDefault(e => e.UserId == userId && e.RoomId == roomId);
		}

		public static Task<RoomUser?> FindAsync(this ITable<RoomUser> table, long userId, long roomId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == userId && e.RoomId == roomId, cancellationToken);
		}

		public static User? Find(this ITable<User> table, long userId)
		{
			return table.FirstOrDefault(e => e.UserId == userId);
		}

		public static Task<User?> FindAsync(this ITable<User> table, long userId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == userId, cancellationToken);
		}
		#endregion
	}
}
